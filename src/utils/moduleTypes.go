package utils

// DO NOT EDIT. This file is generated by cmd/generateModuleTypes/main.go.

import (
	"fmt"
	"strings"
)

type ArpCache struct {
	Addr string `json:"addr"`
	HwType string `json:"hw_type"`
	HwAddr string `json:"hw_addr"`
	Mask string `json:"mask"`
}

func printLongArpCache(depth int, a []*ArpCache) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sArp Cache:\n", indent)
	for _, o := range a {
	fmt.Printf("%sAddr: %s\n", indent, o.Addr)
	fmt.Printf("%sHw Type: %s\n", indent, o.HwType)
	fmt.Printf("%sHw Addr: %s\n", indent, o.HwAddr)
	fmt.Printf("%sMask: %s\n", indent, o.Mask)
	fmt.Println("")
	}
}

type Bandwidth struct {
	Interface string `json:"interface"`
	Tx int `json:"tx"`
	Rx int `json:"rx"`
}

func printLongBandwidth(depth int, a []*Bandwidth) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sBandwidth:\n", indent)
	for _, o := range a {
	fmt.Printf("%sInterface: %s\n", indent, o.Interface)
	fmt.Printf("%sTx: %d\n", indent, o.Tx)
	fmt.Printf("%sRx: %d\n", indent, o.Rx)
	fmt.Println("")
	}
}

type CommonApplications struct {
	Binary string `json:"binary"`
	Location string `json:"location"`
	Installed bool `json:"installed"`
}

func printLongCommonApplications(depth int, a []*CommonApplications) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sCommon Applications:\n", indent)
	for _, o := range a {
	fmt.Printf("%sBinary: %s\n", indent, o.Binary)
	fmt.Printf("%sLocation: %s\n", indent, o.Location)
	fmt.Printf("%sInstalled: %t\n", indent, o.Installed)
	fmt.Println("")
	}
}

type CpuInfo struct {
	Architecture string `json:"Architecture"`
	CPUOpModeS string `json:"CPU op-mode(s)"`
	ByteOrder string `json:"Byte Order"`
	CPUS string `json:"CPU(s)"`
	OnLineCPUSList string `json:"On-line CPU(s) list"`
	ThreadSPerCore string `json:"Thread(s) per core"`
	CoreSPerSocket string `json:"Core(s) per socket"`
	SocketS string `json:"Socket(s)"`
	NUMANodeS string `json:"NUMA node(s)"`
	VendorID string `json:"Vendor ID"`
	CPUFamily string `json:"CPU family"`
	Model string `json:"Model"`
	ModelName string `json:"Model name"`
	Stepping string `json:"Stepping"`
	CPUMHz string `json:"CPU MHz"`
	CPUMaxMHz string `json:"CPU max MHz"`
	CPUMinMHz string `json:"CPU min MHz"`
	BogoMIPS string `json:"BogoMIPS"`
	Virtualization string `json:"Virtualization"`
	L1dCache string `json:"L1d cache"`
	L1iCache string `json:"L1i cache"`
	L2Cache string `json:"L2 cache"`
	L3Cache string `json:"L3 cache"`
	NUMANode0CPUS string `json:"NUMA node0 CPU(s)"`
	Flags string `json:"Flags"`
}

func printLongCpuInfo(depth int, o *CpuInfo) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sCpu Info:\n", indent)
	fmt.Printf("%sArchitecture: %s\n", indent, o.Architecture)
	fmt.Printf("%sCPU Op-Mode(S): %s\n", indent, o.CPUOpModeS)
	fmt.Printf("%sByte Order: %s\n", indent, o.ByteOrder)
	fmt.Printf("%sCPU(S): %s\n", indent, o.CPUS)
	fmt.Printf("%sOn-Line CPU(S) List: %s\n", indent, o.OnLineCPUSList)
	fmt.Printf("%sThread(S) Per Core: %s\n", indent, o.ThreadSPerCore)
	fmt.Printf("%sCore(S) Per Socket: %s\n", indent, o.CoreSPerSocket)
	fmt.Printf("%sSocket(S): %s\n", indent, o.SocketS)
	fmt.Printf("%sNUMA Node(S): %s\n", indent, o.NUMANodeS)
	fmt.Printf("%sVendor ID: %s\n", indent, o.VendorID)
	fmt.Printf("%sCPU Family: %s\n", indent, o.CPUFamily)
	fmt.Printf("%sModel: %s\n", indent, o.Model)
	fmt.Printf("%sModel Name: %s\n", indent, o.ModelName)
	fmt.Printf("%sStepping: %s\n", indent, o.Stepping)
	fmt.Printf("%sCPU MHz: %s\n", indent, o.CPUMHz)
	fmt.Printf("%sCPU Max MHz: %s\n", indent, o.CPUMaxMHz)
	fmt.Printf("%sCPU Min MHz: %s\n", indent, o.CPUMinMHz)
	fmt.Printf("%sBogoMIPS: %s\n", indent, o.BogoMIPS)
	fmt.Printf("%sVirtualization: %s\n", indent, o.Virtualization)
	fmt.Printf("%sL1d Cache: %s\n", indent, o.L1dCache)
	fmt.Printf("%sL1i Cache: %s\n", indent, o.L1iCache)
	fmt.Printf("%sL2 Cache: %s\n", indent, o.L2Cache)
	fmt.Printf("%sL3 Cache: %s\n", indent, o.L3Cache)
	fmt.Printf("%sNUMA Node0 CPU(S): %s\n", indent, o.NUMANode0CPUS)
	fmt.Printf("%sFlags: %s\n", indent, o.Flags)
	fmt.Println("")
}

type CpuIntensiveProcesses struct {
	Pid int `json:"pid"`
	User string `json:"user"`
	CpuPercent float64 `json:"cpu_percent"`
	Rss int `json:"rss"`
	Vsz int `json:"vsz"`
	Cmd string `json:"cmd"`
}

func printLongCpuIntensiveProcesses(depth int, a []*CpuIntensiveProcesses) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sCpu Intensive Processes:\n", indent)
	for _, o := range a {
	fmt.Printf("%sPid: %d\n", indent, o.Pid)
	fmt.Printf("%sUser: %s\n", indent, o.User)
	fmt.Printf("%sCpu Percent: %.2f\n", indent, o.CpuPercent)
	fmt.Printf("%sRss: %d\n", indent, o.Rss)
	fmt.Printf("%sVsz: %d\n", indent, o.Vsz)
	fmt.Printf("%sCmd: %s\n", indent, o.Cmd)
	fmt.Println("")
	}
}

type CpuTemp struct {
	Temp float64 `json:"temp"`
}

func printLongCpuTemp(depth int, o *CpuTemp) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sCpu Temp:\n", indent)
	fmt.Printf("%sTemp: %.2f\n", indent, o.Temp)
	fmt.Println("")
}

type CpuUtilization struct {
	Util int `json:"util"`
}

func printLongCpuUtilization(depth int, o *CpuUtilization) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sCpu Utilization:\n", indent)
	fmt.Printf("%sUtil: %d\n", indent, o.Util)
	fmt.Println("")
}

type CronHistory struct {
	Time string `json:"time"`
	User string `json:"user"`
	Message string `json:"message"`
}

func printLongCronHistory(depth int, a []*CronHistory) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sCron History:\n", indent)
	for _, o := range a {
	fmt.Printf("%sTime: %s\n", indent, o.Time)
	fmt.Printf("%sUser: %s\n", indent, o.User)
	fmt.Printf("%sMessage: %s\n", indent, o.Message)
	fmt.Println("")
	}
}

type CurrentRam struct {
	Total float64 `json:"total"`
	Used float64 `json:"used"`
	Available float64 `json:"available"`
}

func printLongCurrentRam(depth int, o *CurrentRam) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sCurrent Ram:\n", indent)
	fmt.Printf("%sTotal: %.2fMB\n", indent, o.Total)
	fmt.Printf("%sUsed: %.2fMB\n", indent, o.Used)
	fmt.Printf("%sAvailable: %.2fMB\n", indent, o.Available)
	fmt.Println("")
}

type DiskPartitions struct {
	FileSystem string `json:"file_system"`
	Size string `json:"size"`
	Used string `json:"used"`
	Avail string `json:"avail"`
	UsedPercent int `json:"used_percent"`
	Mounted string `json:"mounted"`
}

func printLongDiskPartitions(depth int, a []*DiskPartitions) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sDisk Partitions:\n", indent)
	for _, o := range a {
	fmt.Printf("%sFile System: %s\n", indent, o.FileSystem)
	fmt.Printf("%sSize: %s\n", indent, o.Size)
	fmt.Printf("%sUsed: %s\n", indent, o.Used)
	fmt.Printf("%sAvail: %s\n", indent, o.Avail)
	fmt.Printf("%sUsed Percent: %d%%\n", indent, o.UsedPercent)
	fmt.Printf("%sMounted: %s\n", indent, o.Mounted)
	fmt.Println("")
	}
}

type DockerProcesses struct {
	Cname string `json:"cname"`
	Pid int `json:"pid"`
	User string `json:"user"`
	CpuPercent float64 `json:"cpu_percent"`
	MemPercent float64 `json:"mem_percent"`
	Cmd string `json:"cmd"`
}

func printLongDockerProcesses(depth int, a []*DockerProcesses) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sDocker Processes:\n", indent)
	for _, o := range a {
	fmt.Printf("%sCname: %s\n", indent, o.Cname)
	fmt.Printf("%sPid: %d\n", indent, o.Pid)
	fmt.Printf("%sUser: %s\n", indent, o.User)
	fmt.Printf("%sCpu Percent: %.2f\n", indent, o.CpuPercent)
	fmt.Printf("%sMem Percent: %.2f\n", indent, o.MemPercent)
	fmt.Printf("%sCmd: %s\n", indent, o.Cmd)
	fmt.Println("")
	}
}

type DownloadTransferRate struct {
	Interface string `json:"interface"`
	TransferRate int `json:"transfer_rate"`
}

func printLongDownloadTransferRate(depth int, a []*DownloadTransferRate) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sDownload Transfer Rate:\n", indent)
	for _, o := range a {
	fmt.Printf("%sInterface: %s\n", indent, o.Interface)
	fmt.Printf("%sTransfer Rate: %d\n", indent, o.TransferRate)
	fmt.Println("")
	}
}

type GeneralInfo struct {
	Os string `json:"os"`
	CurrentKernel string `json:"current_kernel"`
	LatestKernel string `json:"latest_kernel"`
	Hostname string `json:"hostname"`
	Uptime string `json:"uptime"`
	ServerTime string `json:"server_time"`
	Path string `json:"path"`
}

func printLongGeneralInfo(depth int, o *GeneralInfo) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sGeneral Info:\n", indent)
	fmt.Printf("%sOs: %s\n", indent, o.Os)
	fmt.Printf("%sCurrent Kernel: %s\n", indent, o.CurrentKernel)
	fmt.Printf("%sLatest Kernel: %s\n", indent, o.LatestKernel)
	fmt.Printf("%sHostname: %s\n", indent, o.Hostname)
	fmt.Printf("%sUptime: %s\n", indent, o.Uptime)
	fmt.Printf("%sServer Time: %s\n", indent, o.ServerTime)
	fmt.Printf("%sPath: %s\n", indent, o.Path)
	fmt.Println("")
}

type IoStats struct {
	Device string `json:"device"`
	Reads int `json:"reads"`
	Writes int `json:"writes"`
	InProg int `json:"in_prog"`
	Time int `json:"time"`
}

func printLongIoStats(depth int, a []*IoStats) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sIo Stats:\n", indent)
	for _, o := range a {
	fmt.Printf("%sDevice: %s\n", indent, o.Device)
	fmt.Printf("%sReads: %d\n", indent, o.Reads)
	fmt.Printf("%sWrites: %d\n", indent, o.Writes)
	fmt.Printf("%sIn Prog: %d\n", indent, o.InProg)
	fmt.Printf("%sTime: %d\n", indent, o.Time)
	fmt.Println("")
	}
}

type LoadAvg struct {
	Avg1Min int `json:"avg_1_min"`
	Avg5Min int `json:"avg_5_min"`
	Avg15Min int `json:"avg_15_min"`
}

func printLongLoadAvg(depth int, o *LoadAvg) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sLoad Avg:\n", indent)
	fmt.Printf("%sAvg 1 Min: %d\n", indent, o.Avg1Min)
	fmt.Printf("%sAvg 5 Min: %d\n", indent, o.Avg5Min)
	fmt.Printf("%sAvg 15 Min: %d\n", indent, o.Avg15Min)
	fmt.Println("")
}

type LoggedInUsers struct {
	User string `json:"user"`
	From string `json:"from"`
	When string `json:"when"`
}

func printLongLoggedInUsers(depth int, a []*LoggedInUsers) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sLogged In Users:\n", indent)
	for _, o := range a {
	fmt.Printf("%sUser: %s\n", indent, o.User)
	fmt.Printf("%sFrom: %s\n", indent, o.From)
	fmt.Printf("%sWhen: %s\n", indent, o.When)
	fmt.Println("")
	}
}

type Memcached struct {
	Bytes int `json:"bytes"`
	BytesRead int `json:"bytes_read"`
	BytesWritten int `json:"bytes_written"`
}

func printLongMemcached(depth int, o *Memcached) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sMemcached:\n", indent)
	fmt.Printf("%sBytes: %d\n", indent, o.Bytes)
	fmt.Printf("%sBytes Read: %d\n", indent, o.BytesRead)
	fmt.Printf("%sBytes Written: %d\n", indent, o.BytesWritten)
	fmt.Println("")
}

type MemoryInfo struct {
	MemTotal string `json:"MemTotal"`
	MemFree string `json:"MemFree"`
	MemAvailable string `json:"MemAvailable"`
	Buffers string `json:"Buffers"`
	Cached string `json:"Cached"`
	SwapCached string `json:"SwapCached"`
	Active string `json:"Active"`
	Inactive string `json:"Inactive"`
	ActiveAnon string `json:"Active(anon)"`
	InactiveAnon string `json:"Inactive(anon)"`
	ActiveFile string `json:"Active(file)"`
	InactiveFile string `json:"Inactive(file)"`
	Unevictable string `json:"Unevictable"`
	Mlocked string `json:"Mlocked"`
	SwapTotal string `json:"SwapTotal"`
	SwapFree string `json:"SwapFree"`
	Dirty string `json:"Dirty"`
	Writeback string `json:"Writeback"`
	AnonPages string `json:"AnonPages"`
	Mapped string `json:"Mapped"`
	Shmem string `json:"Shmem"`
	Slab string `json:"Slab"`
	SReclaimable string `json:"SReclaimable"`
	SUnreclaim string `json:"SUnreclaim"`
	KernelStack string `json:"KernelStack"`
	PageTables string `json:"PageTables"`
	NFSUnstable string `json:"NFS_Unstable"`
	Bounce string `json:"Bounce"`
	WritebackTmp string `json:"WritebackTmp"`
	CommitLimit string `json:"CommitLimit"`
	CommittedAS string `json:"Committed_AS"`
	VmallocTotal string `json:"VmallocTotal"`
	VmallocUsed string `json:"VmallocUsed"`
	VmallocChunk string `json:"VmallocChunk"`
	HardwareCorrupted string `json:"HardwareCorrupted"`
	AnonHugePages string `json:"AnonHugePages"`
	CmaTotal string `json:"CmaTotal"`
	CmaFree string `json:"CmaFree"`
	HugePagesTotal string `json:"HugePages_Total"`
	HugePagesFree string `json:"HugePages_Free"`
	HugePagesRsvd string `json:"HugePages_Rsvd"`
	HugePagesSurp string `json:"HugePages_Surp"`
	Hugepagesize string `json:"Hugepagesize"`
	DirectMap4k string `json:"DirectMap4k"`
	DirectMap2M string `json:"DirectMap2M"`
	DirectMap1G string `json:"DirectMap1G"`
}

func printLongMemoryInfo(depth int, o *MemoryInfo) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sMemory Info:\n", indent)
	fmt.Printf("%sMemTotal: %s\n", indent, o.MemTotal)
	fmt.Printf("%sMemFree: %s\n", indent, o.MemFree)
	fmt.Printf("%sMemAvailable: %s\n", indent, o.MemAvailable)
	fmt.Printf("%sBuffers: %s\n", indent, o.Buffers)
	fmt.Printf("%sCached: %s\n", indent, o.Cached)
	fmt.Printf("%sSwapCached: %s\n", indent, o.SwapCached)
	fmt.Printf("%sActive: %s\n", indent, o.Active)
	fmt.Printf("%sInactive: %s\n", indent, o.Inactive)
	fmt.Printf("%sActive(Anon): %s\n", indent, o.ActiveAnon)
	fmt.Printf("%sInactive(Anon): %s\n", indent, o.InactiveAnon)
	fmt.Printf("%sActive(File): %s\n", indent, o.ActiveFile)
	fmt.Printf("%sInactive(File): %s\n", indent, o.InactiveFile)
	fmt.Printf("%sUnevictable: %s\n", indent, o.Unevictable)
	fmt.Printf("%sMlocked: %s\n", indent, o.Mlocked)
	fmt.Printf("%sSwapTotal: %s\n", indent, o.SwapTotal)
	fmt.Printf("%sSwapFree: %s\n", indent, o.SwapFree)
	fmt.Printf("%sDirty: %s\n", indent, o.Dirty)
	fmt.Printf("%sWriteback: %s\n", indent, o.Writeback)
	fmt.Printf("%sAnonPages: %s\n", indent, o.AnonPages)
	fmt.Printf("%sMapped: %s\n", indent, o.Mapped)
	fmt.Printf("%sShmem: %s\n", indent, o.Shmem)
	fmt.Printf("%sSlab: %s\n", indent, o.Slab)
	fmt.Printf("%sSReclaimable: %s\n", indent, o.SReclaimable)
	fmt.Printf("%sSUnreclaim: %s\n", indent, o.SUnreclaim)
	fmt.Printf("%sKernelStack: %s\n", indent, o.KernelStack)
	fmt.Printf("%sPageTables: %s\n", indent, o.PageTables)
	fmt.Printf("%sNFS Unstable: %s\n", indent, o.NFSUnstable)
	fmt.Printf("%sBounce: %s\n", indent, o.Bounce)
	fmt.Printf("%sWritebackTmp: %s\n", indent, o.WritebackTmp)
	fmt.Printf("%sCommitLimit: %s\n", indent, o.CommitLimit)
	fmt.Printf("%sCommitted AS: %s\n", indent, o.CommittedAS)
	fmt.Printf("%sVmallocTotal: %s\n", indent, o.VmallocTotal)
	fmt.Printf("%sVmallocUsed: %s\n", indent, o.VmallocUsed)
	fmt.Printf("%sVmallocChunk: %s\n", indent, o.VmallocChunk)
	fmt.Printf("%sHardwareCorrupted: %s\n", indent, o.HardwareCorrupted)
	fmt.Printf("%sAnonHugePages: %s\n", indent, o.AnonHugePages)
	fmt.Printf("%sCmaTotal: %s\n", indent, o.CmaTotal)
	fmt.Printf("%sCmaFree: %s\n", indent, o.CmaFree)
	fmt.Printf("%sHugePages Total: %s\n", indent, o.HugePagesTotal)
	fmt.Printf("%sHugePages Free: %s\n", indent, o.HugePagesFree)
	fmt.Printf("%sHugePages Rsvd: %s\n", indent, o.HugePagesRsvd)
	fmt.Printf("%sHugePages Surp: %s\n", indent, o.HugePagesSurp)
	fmt.Printf("%sHugepagesize: %s\n", indent, o.Hugepagesize)
	fmt.Printf("%sDirectMap4k: %s\n", indent, o.DirectMap4k)
	fmt.Printf("%sDirectMap2M: %s\n", indent, o.DirectMap2M)
	fmt.Printf("%sDirectMap1G: %s\n", indent, o.DirectMap1G)
	fmt.Println("")
}

type NeedsUpgrades struct {
	Package string `json:"package"`
	Installed string `json:"installed"`
	Available string `json:"available"`
}

func printLongNeedsUpgrades(depth int, a []*NeedsUpgrades) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sNeeds Upgrades:\n", indent)
	for _, o := range a {
	fmt.Printf("%sPackage: %s\n", indent, o.Package)
	fmt.Printf("%sInstalled: %s\n", indent, o.Installed)
	fmt.Printf("%sAvailable: %s\n", indent, o.Available)
	fmt.Println("")
	}
}

type NetworkConnections struct {
	Connections int `json:"connections"`
	Address string `json:"address"`
}

func printLongNetworkConnections(depth int, a []*NetworkConnections) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sNetwork Connections:\n", indent)
	for _, o := range a {
	fmt.Printf("%sConnections: %d\n", indent, o.Connections)
	fmt.Printf("%sAddress: %s\n", indent, o.Address)
	fmt.Println("")
	}
}

type NetworkInterfaces struct {
	Interface string `json:"interface"`
	MacAddress string `json:"mac_address"`
	Ipv4 []*NetworkInterfacesAddress `json:"ipv4"`
	Ipv6 []*NetworkInterfacesAddress `json:"ipv6"`
}

type NetworkInterfacesAddress struct {
	Address string `json:"address"`
	Broadcast string `json:"broadcast"`
	Mask string `json:"mask"`
}

func printLongNetworkInterfaces(depth int, a []*NetworkInterfaces) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sNetwork Interfaces:\n", indent)
	for _, o := range a {
	fmt.Printf("%sInterface: %s\n", indent, o.Interface)
	fmt.Printf("%sMac Address: %s\n", indent, o.MacAddress)
	fmt.Printf("%sIpv4: \n", indent)
	for _, p := range o.Ipv4 {
		printLongNetworkInterfacesAddress(depth+1, p)
	}
	fmt.Printf("%sIpv6: \n", indent)
	for _, p := range o.Ipv6 {
		printLongNetworkInterfacesAddress(depth+1, p)
	}
	fmt.Println("")
	}
}

func printLongNetworkInterfacesAddress(depth int, o *NetworkInterfacesAddress) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sAddress: %s\n", indent, o.Address)
	fmt.Printf("%sBroadcast: %s\n", indent, o.Broadcast)
	fmt.Printf("%sMask: %s\n", indent, o.Mask)
	fmt.Println("")
}

type NumberOfCpuCores struct {
	Cores int `json:"cores"`
}

func printLongNumberOfCpuCores(depth int, o *NumberOfCpuCores) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sNumber Of Cpu Cores:\n", indent)
	fmt.Printf("%sCores: %d\n", indent, o.Cores)
	fmt.Println("")
}

type Pm2Stats struct {
	AppName string `json:"appName"`
	Id string `json:"id"`
	Mode string `json:"mode"`
	Pid string `json:"pid"`
	Status string `json:"status"`
	Restart string `json:"restart"`
	Uptime string `json:"uptime"`
	Memory string `json:"memory"`
	Watching string `json:"watching"`
}

func printLongPm2Stats(depth int, a []*Pm2Stats) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sPm2 Stats:\n", indent)
	for _, o := range a {
	fmt.Printf("%sAppName: %s\n", indent, o.AppName)
	fmt.Printf("%sId: %s\n", indent, o.Id)
	fmt.Printf("%sMode: %s\n", indent, o.Mode)
	fmt.Printf("%sPid: %s\n", indent, o.Pid)
	fmt.Printf("%sStatus: %s\n", indent, o.Status)
	fmt.Printf("%sRestart: %s\n", indent, o.Restart)
	fmt.Printf("%sUptime: %s\n", indent, o.Uptime)
	fmt.Printf("%sMemory: %s\n", indent, o.Memory)
	fmt.Printf("%sWatching: %s\n", indent, o.Watching)
	fmt.Println("")
	}
}

type RamIntensiveProcesses struct {
	Pid int `json:"pid"`
	User string `json:"user"`
	MemPercent float64 `json:"mem_percent"`
	Rss int `json:"rss"`
	Vsz int `json:"vsz"`
	Cmd string `json:"cmd"`
}

func printLongRamIntensiveProcesses(depth int, a []*RamIntensiveProcesses) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sRam Intensive Processes:\n", indent)
	for _, o := range a {
	fmt.Printf("%sPid: %d\n", indent, o.Pid)
	fmt.Printf("%sUser: %s\n", indent, o.User)
	fmt.Printf("%sMem Percent: %.2f\n", indent, o.MemPercent)
	fmt.Printf("%sRss: %d\n", indent, o.Rss)
	fmt.Printf("%sVsz: %d\n", indent, o.Vsz)
	fmt.Printf("%sCmd: %s\n", indent, o.Cmd)
	fmt.Println("")
	}
}

type RecentAccountLogins struct {
	User string `json:"user"`
	Ip string `json:"ip"`
	Date string `json:"date"`
}

func printLongRecentAccountLogins(depth int, a []*RecentAccountLogins) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sRecent Account Logins:\n", indent)
	for _, o := range a {
	fmt.Printf("%sUser: %s\n", indent, o.User)
	fmt.Printf("%sIp: %s\n", indent, o.Ip)
	fmt.Printf("%sDate: %s\n", indent, o.Date)
	fmt.Println("")
	}
}

type Redis struct {
	RedisVersion string `json:"redis_version"`
	ConnectedClients string `json:"connected_clients"`
	ConnectedSlaves string `json:"connected_slaves"`
	UsedMemoryHuman string `json:"used_memory_human"`
	TotalConnectionsReceived string `json:"total_connections_received"`
	TotalCommandsProcessed string `json:"total_commands_processed"`
}

func printLongRedis(depth int, o *Redis) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sRedis:\n", indent)
	fmt.Printf("%sRedis Version: %s\n", indent, o.RedisVersion)
	fmt.Printf("%sConnected Clients: %s\n", indent, o.ConnectedClients)
	fmt.Printf("%sConnected Slaves: %s\n", indent, o.ConnectedSlaves)
	fmt.Printf("%sUsed Memory Human: %s\n", indent, o.UsedMemoryHuman)
	fmt.Printf("%sTotal Connections Received: %s\n", indent, o.TotalConnectionsReceived)
	fmt.Printf("%sTotal Commands Processed: %s\n", indent, o.TotalCommandsProcessed)
	fmt.Println("")
}

type ScheduledCrons struct {
	Min string `json:"min"`
	Hrs string `json:"hrs"`
	Day string `json:"day"`
	Month string `json:"month"`
	Wkday string `json:"wkday"`
	User string `json:"user"`
	Cmd string `json:"cmd"`
}

func printLongScheduledCrons(depth int, a []*ScheduledCrons) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sScheduled Crons:\n", indent)
	for _, o := range a {
	fmt.Printf("%sMin: %s\n", indent, o.Min)
	fmt.Printf("%sHrs: %s\n", indent, o.Hrs)
	fmt.Printf("%sDay: %s\n", indent, o.Day)
	fmt.Printf("%sMonth: %s\n", indent, o.Month)
	fmt.Printf("%sWkday: %s\n", indent, o.Wkday)
	fmt.Printf("%sUser: %s\n", indent, o.User)
	fmt.Printf("%sCmd: %s\n", indent, o.Cmd)
	fmt.Println("")
	}
}

type Swap struct {
	Filename string `json:"filename"`
	Type string `json:"type"`
	Size string `json:"size"`
	Used string `json:"used"`
	Priority string `json:"priority"`
}

func printLongSwap(depth int, a []*Swap) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sSwap:\n", indent)
	for _, o := range a {
	fmt.Printf("%sFilename: %s\n", indent, o.Filename)
	fmt.Printf("%sType: %s\n", indent, o.Type)
	fmt.Printf("%sSize: %s\n", indent, o.Size)
	fmt.Printf("%sUsed: %s\n", indent, o.Used)
	fmt.Printf("%sPriority: %s\n", indent, o.Priority)
	fmt.Println("")
	}
}

type UploadTransferRate struct {
	Interface string `json:"interface"`
	TransferRate int `json:"transfer_rate"`
}

func printLongUploadTransferRate(depth int, a []*UploadTransferRate) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sUpload Transfer Rate:\n", indent)
	for _, o := range a {
	fmt.Printf("%sInterface: %s\n", indent, o.Interface)
	fmt.Printf("%sTransfer Rate: %d\n", indent, o.TransferRate)
	fmt.Println("")
	}
}

type UserAccounts struct {
	Type string `json:"type"`
	User string `json:"user"`
	Home string `json:"home"`
}

func printLongUserAccounts(depth int, a []*UserAccounts) {
	indent := strings.Repeat(" ", depth*2)
	fmt.Printf("%sUser Accounts:\n", indent)
	for _, o := range a {
	fmt.Printf("%sType: %s\n", indent, o.Type)
	fmt.Printf("%sUser: %s\n", indent, o.User)
	fmt.Printf("%sHome: %s\n", indent, o.Home)
	fmt.Println("")
	}
}

type HostResponse struct {
	Host *ConfigHost `json:"host"`
	ArpCache []*ArpCache `json:"arp_cache,omitempty"`
	Bandwidth []*Bandwidth `json:"bandwidth,omitempty"`
	CommonApplications []*CommonApplications `json:"common_applications,omitempty"`
	CpuInfo *CpuInfo `json:"cpu_info,omitempty"`
	CpuIntensiveProcesses []*CpuIntensiveProcesses `json:"cpu_intensive_processes,omitempty"`
	CpuTemp *CpuTemp `json:"cpu_temp,omitempty"`
	CpuUtilization *CpuUtilization `json:"cpu_utilization,omitempty"`
	CronHistory []*CronHistory `json:"cron_history,omitempty"`
	CurrentRam *CurrentRam `json:"current_ram,omitempty"`
	DiskPartitions []*DiskPartitions `json:"disk_partitions,omitempty"`
	DockerProcesses []*DockerProcesses `json:"docker_processes,omitempty"`
	DownloadTransferRate []*DownloadTransferRate `json:"download_transfer_rate,omitempty"`
	GeneralInfo *GeneralInfo `json:"general_info,omitempty"`
	IoStats []*IoStats `json:"io_stats,omitempty"`
	LoadAvg *LoadAvg `json:"load_avg,omitempty"`
	LoggedInUsers []*LoggedInUsers `json:"logged_in_users,omitempty"`
	Memcached *Memcached `json:"memcached,omitempty"`
	MemoryInfo *MemoryInfo `json:"memory_info,omitempty"`
	NeedsUpgrades []*NeedsUpgrades `json:"needs_upgrades,omitempty"`
	NetworkConnections []*NetworkConnections `json:"network_connections,omitempty"`
	NetworkInterfaces []*NetworkInterfaces `json:"network_interfaces,omitempty"`
	NumberOfCpuCores *NumberOfCpuCores `json:"number_of_cpu_cores,omitempty"`
	Pm2Stats []*Pm2Stats `json:"pm2_stats,omitempty"`
	RamIntensiveProcesses []*RamIntensiveProcesses `json:"ram_intensive_processes,omitempty"`
	RecentAccountLogins []*RecentAccountLogins `json:"recent_account_logins,omitempty"`
	Redis *Redis `json:"redis,omitempty"`
	ScheduledCrons []*ScheduledCrons `json:"scheduled_crons,omitempty"`
	Swap []*Swap `json:"swap,omitempty"`
	UploadTransferRate []*UploadTransferRate `json:"upload_transfer_rate,omitempty"`
	UserAccounts []*UserAccounts `json:"user_accounts,omitempty"`
}

func (r *HostResponse) Print(short bool) {
	if r == nil {
		return
	}

	if short {
		r.printShort()
		return
	}
	r.printLong()
}

func (r *HostResponse) printShort() {
	// TODO
}

func (r *HostResponse) printLong() {
	if len(r.ArpCache) > 0 {
		printLongArpCache(1, r.ArpCache)
		fmt.Println("")
	}
	if len(r.Bandwidth) > 0 {
		printLongBandwidth(1, r.Bandwidth)
		fmt.Println("")
	}
	if len(r.CommonApplications) > 0 {
		printLongCommonApplications(1, r.CommonApplications)
		fmt.Println("")
	}
	if r.CpuInfo != nil {
		printLongCpuInfo(1, r.CpuInfo)
		fmt.Println("")
	}
	if len(r.CpuIntensiveProcesses) > 0 {
		printLongCpuIntensiveProcesses(1, r.CpuIntensiveProcesses)
		fmt.Println("")
	}
	if r.CpuTemp != nil {
		printLongCpuTemp(1, r.CpuTemp)
		fmt.Println("")
	}
	if r.CpuUtilization != nil {
		printLongCpuUtilization(1, r.CpuUtilization)
		fmt.Println("")
	}
	if len(r.CronHistory) > 0 {
		printLongCronHistory(1, r.CronHistory)
		fmt.Println("")
	}
	if r.CurrentRam != nil {
		printLongCurrentRam(1, r.CurrentRam)
		fmt.Println("")
	}
	if len(r.DiskPartitions) > 0 {
		printLongDiskPartitions(1, r.DiskPartitions)
		fmt.Println("")
	}
	if len(r.DockerProcesses) > 0 {
		printLongDockerProcesses(1, r.DockerProcesses)
		fmt.Println("")
	}
	if len(r.DownloadTransferRate) > 0 {
		printLongDownloadTransferRate(1, r.DownloadTransferRate)
		fmt.Println("")
	}
	if r.GeneralInfo != nil {
		printLongGeneralInfo(1, r.GeneralInfo)
		fmt.Println("")
	}
	if len(r.IoStats) > 0 {
		printLongIoStats(1, r.IoStats)
		fmt.Println("")
	}
	if r.LoadAvg != nil {
		printLongLoadAvg(1, r.LoadAvg)
		fmt.Println("")
	}
	if len(r.LoggedInUsers) > 0 {
		printLongLoggedInUsers(1, r.LoggedInUsers)
		fmt.Println("")
	}
	if r.Memcached != nil {
		printLongMemcached(1, r.Memcached)
		fmt.Println("")
	}
	if r.MemoryInfo != nil {
		printLongMemoryInfo(1, r.MemoryInfo)
		fmt.Println("")
	}
	if len(r.NeedsUpgrades) > 0 {
		printLongNeedsUpgrades(1, r.NeedsUpgrades)
		fmt.Println("")
	}
	if len(r.NetworkConnections) > 0 {
		printLongNetworkConnections(1, r.NetworkConnections)
		fmt.Println("")
	}
	if len(r.NetworkInterfaces) > 0 {
		printLongNetworkInterfaces(1, r.NetworkInterfaces)
		fmt.Println("")
	}
	if r.NumberOfCpuCores != nil {
		printLongNumberOfCpuCores(1, r.NumberOfCpuCores)
		fmt.Println("")
	}
	if len(r.Pm2Stats) > 0 {
		printLongPm2Stats(1, r.Pm2Stats)
		fmt.Println("")
	}
	if len(r.RamIntensiveProcesses) > 0 {
		printLongRamIntensiveProcesses(1, r.RamIntensiveProcesses)
		fmt.Println("")
	}
	if len(r.RecentAccountLogins) > 0 {
		printLongRecentAccountLogins(1, r.RecentAccountLogins)
		fmt.Println("")
	}
	if r.Redis != nil {
		printLongRedis(1, r.Redis)
		fmt.Println("")
	}
	if len(r.ScheduledCrons) > 0 {
		printLongScheduledCrons(1, r.ScheduledCrons)
		fmt.Println("")
	}
	if len(r.Swap) > 0 {
		printLongSwap(1, r.Swap)
		fmt.Println("")
	}
	if len(r.UploadTransferRate) > 0 {
		printLongUploadTransferRate(1, r.UploadTransferRate)
		fmt.Println("")
	}
	if len(r.UserAccounts) > 0 {
		printLongUserAccounts(1, r.UserAccounts)
		fmt.Println("")
	}
}
