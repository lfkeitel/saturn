package utils

// DO NOT EDIT. This file is generated by ./cmd/generateModuleTypes/main.go.

import "fmt"

type ArpCache struct {
	Addr string `json:"addr"`
	HwType string `json:"hw_type"`
	HwAddr string `json:"hw_addr"`
	Mask string `json:"mask"`
}

func printLongArpCache(a []*ArpCache) {
	fmt.Println("    Arp Cache:")
	for _, o := range a {
		fmt.Printf("        Addr: %s\n", o.Addr)
		fmt.Printf("        Hw Type: %s\n", o.HwType)
		fmt.Printf("        Hw Addr: %s\n", o.HwAddr)
		fmt.Printf("        Mask: %s\n", o.Mask)
		fmt.Println("")
	}
}

type Bandwidth struct {
	Interface string `json:"interface"`
	Tx int `json:"tx"`
	Rx int `json:"rx"`
}

func printLongBandwidth(a []*Bandwidth) {
	fmt.Println("    Bandwidth:")
	for _, o := range a {
		fmt.Printf("        Interface: %s\n", o.Interface)
		fmt.Printf("        Tx: %d\n", o.Tx)
		fmt.Printf("        Rx: %d\n", o.Rx)
		fmt.Println("")
	}
}

type CommonApplications struct {
	Binary string `json:"binary"`
	Location string `json:"location"`
	Installed bool `json:"installed"`
}

func printLongCommonApplications(a []*CommonApplications) {
	fmt.Println("    Common Applications:")
	for _, o := range a {
		fmt.Printf("        Binary: %s\n", o.Binary)
		fmt.Printf("        Location: %s\n", o.Location)
		fmt.Printf("        Installed: %t\n", o.Installed)
		fmt.Println("")
	}
}

type CpuInfo struct {
	Architecture string `json:"Architecture"`
	CPUOpModeS string `json:"CPU op-mode(s)"`
	ByteOrder string `json:"Byte Order"`
	CPUS string `json:"CPU(s)"`
	OnLineCPUSList string `json:"On-line CPU(s) list"`
	ThreadSPerCore string `json:"Thread(s) per core"`
	CoreSPerSocket string `json:"Core(s) per socket"`
	SocketS string `json:"Socket(s)"`
	NUMANodeS string `json:"NUMA node(s)"`
	VendorID string `json:"Vendor ID"`
	CPUFamily string `json:"CPU family"`
	Model string `json:"Model"`
	ModelName string `json:"Model name"`
	Stepping string `json:"Stepping"`
	CPUMHz string `json:"CPU MHz"`
	CPUMaxMHz string `json:"CPU max MHz"`
	CPUMinMHz string `json:"CPU min MHz"`
	BogoMIPS string `json:"BogoMIPS"`
	Virtualization string `json:"Virtualization"`
	L1dCache string `json:"L1d cache"`
	L1iCache string `json:"L1i cache"`
	L2Cache string `json:"L2 cache"`
	L3Cache string `json:"L3 cache"`
	NUMANode0CPUS string `json:"NUMA node0 CPU(s)"`
	Flags string `json:"Flags"`
}

func printLongCpuInfo(a *CpuInfo) {
	fmt.Println("    Cpu Info:")
	fmt.Printf("        Architecture: %s\n", a.Architecture)
	fmt.Printf("        CPU Op-Mode(S): %s\n", a.CPUOpModeS)
	fmt.Printf("        Byte Order: %s\n", a.ByteOrder)
	fmt.Printf("        CPU(S): %s\n", a.CPUS)
	fmt.Printf("        On-Line CPU(S) List: %s\n", a.OnLineCPUSList)
	fmt.Printf("        Thread(S) Per Core: %s\n", a.ThreadSPerCore)
	fmt.Printf("        Core(S) Per Socket: %s\n", a.CoreSPerSocket)
	fmt.Printf("        Socket(S): %s\n", a.SocketS)
	fmt.Printf("        NUMA Node(S): %s\n", a.NUMANodeS)
	fmt.Printf("        Vendor ID: %s\n", a.VendorID)
	fmt.Printf("        CPU Family: %s\n", a.CPUFamily)
	fmt.Printf("        Model: %s\n", a.Model)
	fmt.Printf("        Model Name: %s\n", a.ModelName)
	fmt.Printf("        Stepping: %s\n", a.Stepping)
	fmt.Printf("        CPU MHz: %s\n", a.CPUMHz)
	fmt.Printf("        CPU Max MHz: %s\n", a.CPUMaxMHz)
	fmt.Printf("        CPU Min MHz: %s\n", a.CPUMinMHz)
	fmt.Printf("        BogoMIPS: %s\n", a.BogoMIPS)
	fmt.Printf("        Virtualization: %s\n", a.Virtualization)
	fmt.Printf("        L1d Cache: %s\n", a.L1dCache)
	fmt.Printf("        L1i Cache: %s\n", a.L1iCache)
	fmt.Printf("        L2 Cache: %s\n", a.L2Cache)
	fmt.Printf("        L3 Cache: %s\n", a.L3Cache)
	fmt.Printf("        NUMA Node0 CPU(S): %s\n", a.NUMANode0CPUS)
	fmt.Printf("        Flags: %s\n", a.Flags)
}

type CpuIntensiveProcesses struct {
	Pid int `json:"pid"`
	User string `json:"user"`
	CpuPercent float64 `json:"cpu_percent"`
	Rss int `json:"rss"`
	Vsz int `json:"vsz"`
	Cmd string `json:"cmd"`
}

func printLongCpuIntensiveProcesses(a []*CpuIntensiveProcesses) {
	fmt.Println("    Cpu Intensive Processes:")
	for _, o := range a {
		fmt.Printf("        Pid: %d\n", o.Pid)
		fmt.Printf("        User: %s\n", o.User)
		fmt.Printf("        Cpu Percent: %.2f\n", o.CpuPercent)
		fmt.Printf("        Rss: %d\n", o.Rss)
		fmt.Printf("        Vsz: %d\n", o.Vsz)
		fmt.Printf("        Cmd: %s\n", o.Cmd)
		fmt.Println("")
	}
}

type CpuTemp struct {
	Temp float64 `json:"temp"`
}

func printLongCpuTemp(a *CpuTemp) {
	fmt.Println("    Cpu Temp:")
	fmt.Printf("        Temp: %.2f\n", a.Temp)
}

type CpuUtilization struct {
	Util int `json:"util"`
}

func printLongCpuUtilization(a *CpuUtilization) {
	fmt.Println("    Cpu Utilization:")
	fmt.Printf("        Util: %d\n", a.Util)
}

type CronHistory struct {
	Time string `json:"time"`
	User string `json:"user"`
	Message string `json:"message"`
}

func printLongCronHistory(a []*CronHistory) {
	fmt.Println("    Cron History:")
	for _, o := range a {
		fmt.Printf("        Time: %s\n", o.Time)
		fmt.Printf("        User: %s\n", o.User)
		fmt.Printf("        Message: %s\n", o.Message)
		fmt.Println("")
	}
}

type CurrentRam struct {
	Total float64 `json:"total"`
	Used float64 `json:"used"`
	Available float64 `json:"available"`
}

func printLongCurrentRam(a *CurrentRam) {
	fmt.Println("    Current Ram:")
	fmt.Printf("        Total: %.2fMB\n", a.Total)
	fmt.Printf("        Used: %.2fMB\n", a.Used)
	fmt.Printf("        Available: %.2fMB\n", a.Available)
}

type DiskPartitions struct {
	FileSystem string `json:"file_system"`
	Size string `json:"size"`
	Used string `json:"used"`
	Avail string `json:"avail"`
	UsedPercent int `json:"used_percent"`
	Mounted string `json:"mounted"`
}

func printLongDiskPartitions(a []*DiskPartitions) {
	fmt.Println("    Disk Partitions:")
	for _, o := range a {
		fmt.Printf("        File System: %s\n", o.FileSystem)
		fmt.Printf("        Size: %s\n", o.Size)
		fmt.Printf("        Used: %s\n", o.Used)
		fmt.Printf("        Avail: %s\n", o.Avail)
		fmt.Printf("        Used Percent: %d%%\n", o.UsedPercent)
		fmt.Printf("        Mounted: %s\n", o.Mounted)
		fmt.Println("")
	}
}

type DockerProcesses struct {
	Cname string `json:"cname"`
	Pid int `json:"pid"`
	User string `json:"user"`
	CpuPercent float64 `json:"cpu_percent"`
	MemPercent float64 `json:"mem_percent"`
	Cmd string `json:"cmd"`
}

func printLongDockerProcesses(a []*DockerProcesses) {
	fmt.Println("    Docker Processes:")
	for _, o := range a {
		fmt.Printf("        Cname: %s\n", o.Cname)
		fmt.Printf("        Pid: %d\n", o.Pid)
		fmt.Printf("        User: %s\n", o.User)
		fmt.Printf("        Cpu Percent: %.2f\n", o.CpuPercent)
		fmt.Printf("        Mem Percent: %.2f\n", o.MemPercent)
		fmt.Printf("        Cmd: %s\n", o.Cmd)
		fmt.Println("")
	}
}

type DownloadTransferRate struct {
	Interface string `json:"interface"`
	TransferRate int `json:"transfer_rate"`
}

func printLongDownloadTransferRate(a []*DownloadTransferRate) {
	fmt.Println("    Download Transfer Rate:")
	for _, o := range a {
		fmt.Printf("        Interface: %s\n", o.Interface)
		fmt.Printf("        Transfer Rate: %d\n", o.TransferRate)
		fmt.Println("")
	}
}

type GeneralInfo struct {
	Os string `json:"os"`
	CurrentKernel string `json:"current_kernel"`
	LatestKernel string `json:"latest_kernel"`
	Hostname string `json:"hostname"`
	Uptime string `json:"uptime"`
	ServerTime string `json:"server_time"`
	Path string `json:"path"`
}

func printLongGeneralInfo(a *GeneralInfo) {
	fmt.Println("    General Info:")
	fmt.Printf("        Os: %s\n", a.Os)
	fmt.Printf("        Current Kernel: %s\n", a.CurrentKernel)
	fmt.Printf("        Latest Kernel: %s\n", a.LatestKernel)
	fmt.Printf("        Hostname: %s\n", a.Hostname)
	fmt.Printf("        Uptime: %s\n", a.Uptime)
	fmt.Printf("        Server Time: %s\n", a.ServerTime)
	fmt.Printf("        Path: %s\n", a.Path)
}

type IoStats struct {
	Device string `json:"device"`
	Reads int `json:"reads"`
	Writes int `json:"writes"`
	InProg int `json:"in_prog"`
	Time int `json:"time"`
}

func printLongIoStats(a []*IoStats) {
	fmt.Println("    Io Stats:")
	for _, o := range a {
		fmt.Printf("        Device: %s\n", o.Device)
		fmt.Printf("        Reads: %d\n", o.Reads)
		fmt.Printf("        Writes: %d\n", o.Writes)
		fmt.Printf("        In Prog: %d\n", o.InProg)
		fmt.Printf("        Time: %d\n", o.Time)
		fmt.Println("")
	}
}

type LoadAvg struct {
	Avg1Min int `json:"avg_1_min"`
	Avg5Min int `json:"avg_5_min"`
	Avg15Min int `json:"avg_15_min"`
}

func printLongLoadAvg(a *LoadAvg) {
	fmt.Println("    Load Avg:")
	fmt.Printf("        Avg 1 Min: %d\n", a.Avg1Min)
	fmt.Printf("        Avg 5 Min: %d\n", a.Avg5Min)
	fmt.Printf("        Avg 15 Min: %d\n", a.Avg15Min)
}

type LoggedInUsers struct {
	User string `json:"user"`
	From string `json:"from"`
	When string `json:"when"`
}

func printLongLoggedInUsers(a []*LoggedInUsers) {
	fmt.Println("    Logged In Users:")
	for _, o := range a {
		fmt.Printf("        User: %s\n", o.User)
		fmt.Printf("        From: %s\n", o.From)
		fmt.Printf("        When: %s\n", o.When)
		fmt.Println("")
	}
}

type Memcached struct {
	Bytes int `json:"bytes"`
	BytesRead int `json:"bytes_read"`
	BytesWritten int `json:"bytes_written"`
}

func printLongMemcached(a *Memcached) {
	fmt.Println("    Memcached:")
	fmt.Printf("        Bytes: %d\n", a.Bytes)
	fmt.Printf("        Bytes Read: %d\n", a.BytesRead)
	fmt.Printf("        Bytes Written: %d\n", a.BytesWritten)
}

type MemoryInfo struct {
	MemTotal string `json:"MemTotal"`
	MemFree string `json:"MemFree"`
	MemAvailable string `json:"MemAvailable"`
	Buffers string `json:"Buffers"`
	Cached string `json:"Cached"`
	SwapCached string `json:"SwapCached"`
	Active string `json:"Active"`
	Inactive string `json:"Inactive"`
	ActiveAnon string `json:"Active(anon)"`
	InactiveAnon string `json:"Inactive(anon)"`
	ActiveFile string `json:"Active(file)"`
	InactiveFile string `json:"Inactive(file)"`
	Unevictable string `json:"Unevictable"`
	Mlocked string `json:"Mlocked"`
	SwapTotal string `json:"SwapTotal"`
	SwapFree string `json:"SwapFree"`
	Dirty string `json:"Dirty"`
	Writeback string `json:"Writeback"`
	AnonPages string `json:"AnonPages"`
	Mapped string `json:"Mapped"`
	Shmem string `json:"Shmem"`
	Slab string `json:"Slab"`
	SReclaimable string `json:"SReclaimable"`
	SUnreclaim string `json:"SUnreclaim"`
	KernelStack string `json:"KernelStack"`
	PageTables string `json:"PageTables"`
	NFSUnstable string `json:"NFS_Unstable"`
	Bounce string `json:"Bounce"`
	WritebackTmp string `json:"WritebackTmp"`
	CommitLimit string `json:"CommitLimit"`
	CommittedAS string `json:"Committed_AS"`
	VmallocTotal string `json:"VmallocTotal"`
	VmallocUsed string `json:"VmallocUsed"`
	VmallocChunk string `json:"VmallocChunk"`
	HardwareCorrupted string `json:"HardwareCorrupted"`
	AnonHugePages string `json:"AnonHugePages"`
	CmaTotal string `json:"CmaTotal"`
	CmaFree string `json:"CmaFree"`
	HugePagesTotal string `json:"HugePages_Total"`
	HugePagesFree string `json:"HugePages_Free"`
	HugePagesRsvd string `json:"HugePages_Rsvd"`
	HugePagesSurp string `json:"HugePages_Surp"`
	Hugepagesize string `json:"Hugepagesize"`
	DirectMap4k string `json:"DirectMap4k"`
	DirectMap2M string `json:"DirectMap2M"`
	DirectMap1G string `json:"DirectMap1G"`
}

func printLongMemoryInfo(a *MemoryInfo) {
	fmt.Println("    Memory Info:")
	fmt.Printf("        MemTotal: %s\n", a.MemTotal)
	fmt.Printf("        MemFree: %s\n", a.MemFree)
	fmt.Printf("        MemAvailable: %s\n", a.MemAvailable)
	fmt.Printf("        Buffers: %s\n", a.Buffers)
	fmt.Printf("        Cached: %s\n", a.Cached)
	fmt.Printf("        SwapCached: %s\n", a.SwapCached)
	fmt.Printf("        Active: %s\n", a.Active)
	fmt.Printf("        Inactive: %s\n", a.Inactive)
	fmt.Printf("        Active(Anon): %s\n", a.ActiveAnon)
	fmt.Printf("        Inactive(Anon): %s\n", a.InactiveAnon)
	fmt.Printf("        Active(File): %s\n", a.ActiveFile)
	fmt.Printf("        Inactive(File): %s\n", a.InactiveFile)
	fmt.Printf("        Unevictable: %s\n", a.Unevictable)
	fmt.Printf("        Mlocked: %s\n", a.Mlocked)
	fmt.Printf("        SwapTotal: %s\n", a.SwapTotal)
	fmt.Printf("        SwapFree: %s\n", a.SwapFree)
	fmt.Printf("        Dirty: %s\n", a.Dirty)
	fmt.Printf("        Writeback: %s\n", a.Writeback)
	fmt.Printf("        AnonPages: %s\n", a.AnonPages)
	fmt.Printf("        Mapped: %s\n", a.Mapped)
	fmt.Printf("        Shmem: %s\n", a.Shmem)
	fmt.Printf("        Slab: %s\n", a.Slab)
	fmt.Printf("        SReclaimable: %s\n", a.SReclaimable)
	fmt.Printf("        SUnreclaim: %s\n", a.SUnreclaim)
	fmt.Printf("        KernelStack: %s\n", a.KernelStack)
	fmt.Printf("        PageTables: %s\n", a.PageTables)
	fmt.Printf("        NFS Unstable: %s\n", a.NFSUnstable)
	fmt.Printf("        Bounce: %s\n", a.Bounce)
	fmt.Printf("        WritebackTmp: %s\n", a.WritebackTmp)
	fmt.Printf("        CommitLimit: %s\n", a.CommitLimit)
	fmt.Printf("        Committed AS: %s\n", a.CommittedAS)
	fmt.Printf("        VmallocTotal: %s\n", a.VmallocTotal)
	fmt.Printf("        VmallocUsed: %s\n", a.VmallocUsed)
	fmt.Printf("        VmallocChunk: %s\n", a.VmallocChunk)
	fmt.Printf("        HardwareCorrupted: %s\n", a.HardwareCorrupted)
	fmt.Printf("        AnonHugePages: %s\n", a.AnonHugePages)
	fmt.Printf("        CmaTotal: %s\n", a.CmaTotal)
	fmt.Printf("        CmaFree: %s\n", a.CmaFree)
	fmt.Printf("        HugePages Total: %s\n", a.HugePagesTotal)
	fmt.Printf("        HugePages Free: %s\n", a.HugePagesFree)
	fmt.Printf("        HugePages Rsvd: %s\n", a.HugePagesRsvd)
	fmt.Printf("        HugePages Surp: %s\n", a.HugePagesSurp)
	fmt.Printf("        Hugepagesize: %s\n", a.Hugepagesize)
	fmt.Printf("        DirectMap4k: %s\n", a.DirectMap4k)
	fmt.Printf("        DirectMap2M: %s\n", a.DirectMap2M)
	fmt.Printf("        DirectMap1G: %s\n", a.DirectMap1G)
}

type NeedsUpgrades struct {
	Package string `json:"package"`
	Installed string `json:"installed"`
	Available string `json:"available"`
}

func printLongNeedsUpgrades(a []*NeedsUpgrades) {
	fmt.Println("    Needs Upgrades:")
	for _, o := range a {
		fmt.Printf("        Package: %s\n", o.Package)
		fmt.Printf("        Installed: %s\n", o.Installed)
		fmt.Printf("        Available: %s\n", o.Available)
		fmt.Println("")
	}
}

type NetworkConnections struct {
	Connections int `json:"connections"`
	Address string `json:"address"`
}

func printLongNetworkConnections(a *NetworkConnections) {
	fmt.Println("    Network Connections:")
	fmt.Printf("        Connections: %d\n", a.Connections)
	fmt.Printf("        Address: %s\n", a.Address)
}

type NetworkInterfaces struct {
	Interface string `json:"interface"`
	Ipv4Address string `json:"ipv4_address"`
	Ipv6Address string `json:"ipv6_address"`
	MacAddress string `json:"mac_address"`
	Broadcast string `json:"broadcast"`
	SubnetMask string `json:"subnet_mask"`
}

func printLongNetworkInterfaces(a []*NetworkInterfaces) {
	fmt.Println("    Network Interfaces:")
	for _, o := range a {
		fmt.Printf("        Interface: %s\n", o.Interface)
		fmt.Printf("        Ipv4 Address: %s\n", o.Ipv4Address)
		fmt.Printf("        Ipv6 Address: %s\n", o.Ipv6Address)
		fmt.Printf("        Mac Address: %s\n", o.MacAddress)
		fmt.Printf("        Broadcast: %s\n", o.Broadcast)
		fmt.Printf("        Subnet Mask: %s\n", o.SubnetMask)
		fmt.Println("")
	}
}

type NumberOfCpuCores struct {
	Cores int `json:"cores"`
}

func printLongNumberOfCpuCores(a *NumberOfCpuCores) {
	fmt.Println("    Number Of Cpu Cores:")
	fmt.Printf("        Cores: %d\n", a.Cores)
}

type Pm2Stats struct {
	AppName string `json:"appName"`
	Id string `json:"id"`
	Mode string `json:"mode"`
	Pid string `json:"pid"`
	Status string `json:"status"`
	Restart string `json:"restart"`
	Uptime string `json:"uptime"`
	Memory string `json:"memory"`
	Watching string `json:"watching"`
}

func printLongPm2Stats(a []*Pm2Stats) {
	fmt.Println("    Pm2 Stats:")
	for _, o := range a {
		fmt.Printf("        AppName: %s\n", o.AppName)
		fmt.Printf("        Id: %s\n", o.Id)
		fmt.Printf("        Mode: %s\n", o.Mode)
		fmt.Printf("        Pid: %s\n", o.Pid)
		fmt.Printf("        Status: %s\n", o.Status)
		fmt.Printf("        Restart: %s\n", o.Restart)
		fmt.Printf("        Uptime: %s\n", o.Uptime)
		fmt.Printf("        Memory: %s\n", o.Memory)
		fmt.Printf("        Watching: %s\n", o.Watching)
		fmt.Println("")
	}
}

type RamIntensiveProcesses struct {
	Pid int `json:"pid"`
	User string `json:"user"`
	MemPercent float64 `json:"mem_percent"`
	Rss int `json:"rss"`
	Vsz int `json:"vsz"`
	Cmd string `json:"cmd"`
}

func printLongRamIntensiveProcesses(a []*RamIntensiveProcesses) {
	fmt.Println("    Ram Intensive Processes:")
	for _, o := range a {
		fmt.Printf("        Pid: %d\n", o.Pid)
		fmt.Printf("        User: %s\n", o.User)
		fmt.Printf("        Mem Percent: %.2f\n", o.MemPercent)
		fmt.Printf("        Rss: %d\n", o.Rss)
		fmt.Printf("        Vsz: %d\n", o.Vsz)
		fmt.Printf("        Cmd: %s\n", o.Cmd)
		fmt.Println("")
	}
}

type RecentAccountLogins struct {
	User string `json:"user"`
	Ip string `json:"ip"`
	Date string `json:"date"`
}

func printLongRecentAccountLogins(a []*RecentAccountLogins) {
	fmt.Println("    Recent Account Logins:")
	for _, o := range a {
		fmt.Printf("        User: %s\n", o.User)
		fmt.Printf("        Ip: %s\n", o.Ip)
		fmt.Printf("        Date: %s\n", o.Date)
		fmt.Println("")
	}
}

type Redis struct {
	RedisVersion string `json:"redis_version"`
	ConnectedClients string `json:"connected_clients"`
	ConnectedSlaves string `json:"connected_slaves"`
	UsedMemoryHuman string `json:"used_memory_human"`
	TotalConnectionsReceived string `json:"total_connections_received"`
	TotalCommandsProcessed string `json:"total_commands_processed"`
}

func printLongRedis(a *Redis) {
	fmt.Println("    Redis:")
	fmt.Printf("        Redis Version: %s\n", a.RedisVersion)
	fmt.Printf("        Connected Clients: %s\n", a.ConnectedClients)
	fmt.Printf("        Connected Slaves: %s\n", a.ConnectedSlaves)
	fmt.Printf("        Used Memory Human: %s\n", a.UsedMemoryHuman)
	fmt.Printf("        Total Connections Received: %s\n", a.TotalConnectionsReceived)
	fmt.Printf("        Total Commands Processed: %s\n", a.TotalCommandsProcessed)
}

type ScheduledCrons struct {
	Min string `json:"min"`
	Hrs string `json:"hrs"`
	Day string `json:"day"`
	Month string `json:"month"`
	Wkday string `json:"wkday"`
	User string `json:"user"`
	Cmd string `json:"cmd"`
}

func printLongScheduledCrons(a []*ScheduledCrons) {
	fmt.Println("    Scheduled Crons:")
	for _, o := range a {
		fmt.Printf("        Min: %s\n", o.Min)
		fmt.Printf("        Hrs: %s\n", o.Hrs)
		fmt.Printf("        Day: %s\n", o.Day)
		fmt.Printf("        Month: %s\n", o.Month)
		fmt.Printf("        Wkday: %s\n", o.Wkday)
		fmt.Printf("        User: %s\n", o.User)
		fmt.Printf("        Cmd: %s\n", o.Cmd)
		fmt.Println("")
	}
}

type Swap struct {
	Filename string `json:"filename"`
	Type string `json:"type"`
	Size string `json:"size"`
	Used string `json:"used"`
	Priority string `json:"priority"`
}

func printLongSwap(a []*Swap) {
	fmt.Println("    Swap:")
	for _, o := range a {
		fmt.Printf("        Filename: %s\n", o.Filename)
		fmt.Printf("        Type: %s\n", o.Type)
		fmt.Printf("        Size: %s\n", o.Size)
		fmt.Printf("        Used: %s\n", o.Used)
		fmt.Printf("        Priority: %s\n", o.Priority)
		fmt.Println("")
	}
}

type UploadTransferRate struct {
	Interface string `json:"interface"`
	TransferRate int `json:"transfer_rate"`
}

func printLongUploadTransferRate(a []*UploadTransferRate) {
	fmt.Println("    Upload Transfer Rate:")
	for _, o := range a {
		fmt.Printf("        Interface: %s\n", o.Interface)
		fmt.Printf("        Transfer Rate: %d\n", o.TransferRate)
		fmt.Println("")
	}
}

type UserAccounts struct {
	Type string `json:"type"`
	User string `json:"user"`
	Home string `json:"home"`
}

func printLongUserAccounts(a []*UserAccounts) {
	fmt.Println("    User Accounts:")
	for _, o := range a {
		fmt.Printf("        Type: %s\n", o.Type)
		fmt.Printf("        User: %s\n", o.User)
		fmt.Printf("        Home: %s\n", o.Home)
		fmt.Println("")
	}
}

type HostResponse struct {
	Host *ConfigHost `json:"host"`
	ArpCache []*ArpCache `json:"arp_cache,omitempty"`
	Bandwidth []*Bandwidth `json:"bandwidth,omitempty"`
	CommonApplications []*CommonApplications `json:"common_applications,omitempty"`
	CpuInfo *CpuInfo `json:"cpu_info,omitempty"`
	CpuIntensiveProcesses []*CpuIntensiveProcesses `json:"cpu_intensive_processes,omitempty"`
	CpuTemp *CpuTemp `json:"cpu_temp,omitempty"`
	CpuUtilization *CpuUtilization `json:"cpu_utilization,omitempty"`
	CronHistory []*CronHistory `json:"cron_history,omitempty"`
	CurrentRam *CurrentRam `json:"current_ram,omitempty"`
	DiskPartitions []*DiskPartitions `json:"disk_partitions,omitempty"`
	DockerProcesses []*DockerProcesses `json:"docker_processes,omitempty"`
	DownloadTransferRate []*DownloadTransferRate `json:"download_transfer_rate,omitempty"`
	GeneralInfo *GeneralInfo `json:"general_info,omitempty"`
	IoStats []*IoStats `json:"io_stats,omitempty"`
	LoadAvg *LoadAvg `json:"load_avg,omitempty"`
	LoggedInUsers []*LoggedInUsers `json:"logged_in_users,omitempty"`
	Memcached *Memcached `json:"memcached,omitempty"`
	MemoryInfo *MemoryInfo `json:"memory_info,omitempty"`
	NeedsUpgrades []*NeedsUpgrades `json:"needs_upgrades,omitempty"`
	NetworkConnections *NetworkConnections `json:"network_connections,omitempty"`
	NetworkInterfaces []*NetworkInterfaces `json:"network_interfaces,omitempty"`
	NumberOfCpuCores *NumberOfCpuCores `json:"number_of_cpu_cores,omitempty"`
	Pm2Stats []*Pm2Stats `json:"pm2_stats,omitempty"`
	RamIntensiveProcesses []*RamIntensiveProcesses `json:"ram_intensive_processes,omitempty"`
	RecentAccountLogins []*RecentAccountLogins `json:"recent_account_logins,omitempty"`
	Redis *Redis `json:"redis,omitempty"`
	ScheduledCrons []*ScheduledCrons `json:"scheduled_crons,omitempty"`
	Swap []*Swap `json:"swap,omitempty"`
	UploadTransferRate []*UploadTransferRate `json:"upload_transfer_rate,omitempty"`
	UserAccounts []*UserAccounts `json:"user_accounts,omitempty"`
}

func (r *HostResponse) Print(short bool) {
	if r == nil {
		return
	}

	if short {
		r.printShort()
		return
	}
	r.printLong()
}

func (r *HostResponse) printShort() {
	// TODO
}

func (r *HostResponse) printLong() {
	if len(r.ArpCache) > 0 {
		printLongArpCache(r.ArpCache)
		fmt.Println("")
	}
	if len(r.Bandwidth) > 0 {
		printLongBandwidth(r.Bandwidth)
		fmt.Println("")
	}
	if len(r.CommonApplications) > 0 {
		printLongCommonApplications(r.CommonApplications)
		fmt.Println("")
	}
	if r.CpuInfo != nil {
		printLongCpuInfo(r.CpuInfo)
		fmt.Println("")
	}
	if len(r.CpuIntensiveProcesses) > 0 {
		printLongCpuIntensiveProcesses(r.CpuIntensiveProcesses)
		fmt.Println("")
	}
	if r.CpuTemp != nil {
		printLongCpuTemp(r.CpuTemp)
		fmt.Println("")
	}
	if r.CpuUtilization != nil {
		printLongCpuUtilization(r.CpuUtilization)
		fmt.Println("")
	}
	if len(r.CronHistory) > 0 {
		printLongCronHistory(r.CronHistory)
		fmt.Println("")
	}
	if r.CurrentRam != nil {
		printLongCurrentRam(r.CurrentRam)
		fmt.Println("")
	}
	if len(r.DiskPartitions) > 0 {
		printLongDiskPartitions(r.DiskPartitions)
		fmt.Println("")
	}
	if len(r.DockerProcesses) > 0 {
		printLongDockerProcesses(r.DockerProcesses)
		fmt.Println("")
	}
	if len(r.DownloadTransferRate) > 0 {
		printLongDownloadTransferRate(r.DownloadTransferRate)
		fmt.Println("")
	}
	if r.GeneralInfo != nil {
		printLongGeneralInfo(r.GeneralInfo)
		fmt.Println("")
	}
	if len(r.IoStats) > 0 {
		printLongIoStats(r.IoStats)
		fmt.Println("")
	}
	if r.LoadAvg != nil {
		printLongLoadAvg(r.LoadAvg)
		fmt.Println("")
	}
	if len(r.LoggedInUsers) > 0 {
		printLongLoggedInUsers(r.LoggedInUsers)
		fmt.Println("")
	}
	if r.Memcached != nil {
		printLongMemcached(r.Memcached)
		fmt.Println("")
	}
	if r.MemoryInfo != nil {
		printLongMemoryInfo(r.MemoryInfo)
		fmt.Println("")
	}
	if len(r.NeedsUpgrades) > 0 {
		printLongNeedsUpgrades(r.NeedsUpgrades)
		fmt.Println("")
	}
	if r.NetworkConnections != nil {
		printLongNetworkConnections(r.NetworkConnections)
		fmt.Println("")
	}
	if len(r.NetworkInterfaces) > 0 {
		printLongNetworkInterfaces(r.NetworkInterfaces)
		fmt.Println("")
	}
	if r.NumberOfCpuCores != nil {
		printLongNumberOfCpuCores(r.NumberOfCpuCores)
		fmt.Println("")
	}
	if len(r.Pm2Stats) > 0 {
		printLongPm2Stats(r.Pm2Stats)
		fmt.Println("")
	}
	if len(r.RamIntensiveProcesses) > 0 {
		printLongRamIntensiveProcesses(r.RamIntensiveProcesses)
		fmt.Println("")
	}
	if len(r.RecentAccountLogins) > 0 {
		printLongRecentAccountLogins(r.RecentAccountLogins)
		fmt.Println("")
	}
	if r.Redis != nil {
		printLongRedis(r.Redis)
		fmt.Println("")
	}
	if len(r.ScheduledCrons) > 0 {
		printLongScheduledCrons(r.ScheduledCrons)
		fmt.Println("")
	}
	if len(r.Swap) > 0 {
		printLongSwap(r.Swap)
		fmt.Println("")
	}
	if len(r.UploadTransferRate) > 0 {
		printLongUploadTransferRate(r.UploadTransferRate)
		fmt.Println("")
	}
	if len(r.UserAccounts) > 0 {
		printLongUserAccounts(r.UserAccounts)
		fmt.Println("")
	}
}

